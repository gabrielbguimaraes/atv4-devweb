
C:\USERS\BIEL_\ATV-SEQUELIZE\BACKEND\CONFIG\CONFIG.JSON CODE IS BELOW
{
  "development": {
    "username": "root",
    "password": null,
    "database": "devweb",
    "host": "127.0.0.1",
    "dialect": "mysql"
  },
  "test": {
    "username": "root",
    "password": null,
    "database": "database_test",
    "host": "127.0.0.1",
    "dialect": "mysql"
  },
  "production": {
    "username": "root",
    "password": null,
    "database": "database_production",
    "host": "127.0.0.1",
    "dialect": "mysql"
  }
}


C:\USERS\BIEL_\ATV-SEQUELIZE\BACKEND\MODELS\INDEX.JS CODE IS BELOW
'use strict';

const fs = require('fs');
const path = require('path');
const Sequelize = require('sequelize');
const process = require('process');
const basename = path.basename(__filename);
const env = process.env.NODE_ENV || 'development';
const config = require(__dirname + '/../config/config.json')[env];
const db = {};

let sequelize;
if (config.use_env_variable) {
  sequelize = new Sequelize(process.env[config.use_env_variable], config);
} else {
  sequelize = new Sequelize(config.database, config.username, config.password, config);
}

fs
  .readdirSync(__dirname)
  .filter(file => {
    return (
      file.indexOf('.') !== 0 &&
      file !== basename &&
      file.slice(-3) === '.js' &&
      file.indexOf('.test.js') === -1
    );
  })
  .forEach(file => {
    const model = require(path.join(__dirname, file))(sequelize, Sequelize.DataTypes);
    db[model.name] = model;
  });

Object.keys(db).forEach(modelName => {
  if (db[modelName].associate) {
    db[modelName].associate(db);
  }
});

db.sequelize = sequelize;
db.Sequelize = Sequelize;

module.exports = db;


C:\USERS\BIEL_\ATV-SEQUELIZE\BACKEND\SRC\APP.JS CODE IS BELOW
import express from 'express';
import cors from 'cors';
import bodyParser from 'body-parser';
import productRoutes from './routes/productRoutes.js';
import purchaseHistoryRoutes from './routes/purchaseHistoryRoutes.js';

const app = express();
const port = 3001;


app.use(cors());
app.use(bodyParser.json());


app.use(productRoutes);
app.use(purchaseHistoryRoutes);


app.listen(port, () => {
  console.log(`Server is running at http://localhost:${port}`);
});

C:\USERS\BIEL_\ATV-SEQUELIZE\BACKEND\SRC\CONFIG\DATABASE.JS CODE IS BELOW
import { Sequelize } from 'sequelize';


const sequelize = new Sequelize('devweb', 'root', '', {
  host: 'localhost',
  dialect: 'mysql'
});

export default sequelize;

C:\USERS\BIEL_\ATV-SEQUELIZE\BACKEND\SRC\DB.JS CODE IS BELOW
import mysql from 'mysql2/promise';

export const pool = mysql.createPool({
  host: 'localhost',
  user: 'root',
  password: '',
  database: 'devweb',
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0
});


C:\USERS\BIEL_\ATV-SEQUELIZE\BACKEND\SRC\MODELS\INDEX.JS CODE IS BELOW
import sequelize from '../config/database.js';
import Product from './Product.js';
import Supplier from './Supplier.js';
import PurchaseHistory from './PurchaseHistory.js';


const syncModels = async () => {
  try {
    await sequelize.sync({ force: false });
    console.log('Models synchronized with the database.');
  } catch (error) {
    console.error('Unable to synchronize models with the database:', error);
  }
};

syncModels();

export { Product, Supplier, PurchaseHistory };

C:\USERS\BIEL_\ATV-SEQUELIZE\BACKEND\SRC\MODELS\PRODUCT.JS CODE IS BELOW
import { Model, DataTypes } from 'sequelize';
import sequelize from '../config/database.js';

class Product extends Model {}

Product.init(
  {
    id: {
      type: DataTypes.INTEGER.UNSIGNED,
      autoIncrement: true,
      primaryKey: true,
    },
    name: {
      type: DataTypes.STRING,
      allowNull: false,
    },
    price: {
      type: DataTypes.DECIMAL(10, 2),
      allowNull: false,
    }
  },
  {
    sequelize,
    tableName: 'products',
    timestamps: true,
  }
);

export default Product;


C:\USERS\BIEL_\ATV-SEQUELIZE\BACKEND\SRC\MODELS\PURCHASEHISTORY.JS CODE IS BELOW
import { Model, DataTypes } from 'sequelize';
import sequelize from '../config/database.js';
import Product from './Product.js';
import Supplier from './Supplier.js';

class PurchaseHistory extends Model {}

PurchaseHistory.init(
  {
    id: {
      type: DataTypes.INTEGER.UNSIGNED,
      autoIncrement: true,
      primaryKey: true,
    },
    productId: {
      type: DataTypes.INTEGER.UNSIGNED,
      allowNull: false,
      references: {
        model: Product,
        key: 'id',
      },
    },
    supplierId: {
      type: DataTypes.INTEGER.UNSIGNED,
      allowNull: false,
      references: {
        model: Supplier,
        key: 'id',
      },
    },
    quantity: {
      type: DataTypes.INTEGER.UNSIGNED,
      allowNull: false,
    },
    purchaseDate: {
      type: DataTypes.DATE,
      allowNull: false,
    },
  },
  {
    tableName: 'PurchaseHistories',
    sequelize,
  },
);

PurchaseHistory.belongsTo(Product, { foreignKey: 'productId' });
PurchaseHistory.belongsTo(Supplier, { foreignKey: 'supplierId' });

export default PurchaseHistory;


C:\USERS\BIEL_\ATV-SEQUELIZE\BACKEND\SRC\MODELS\SUPPLIER.JS CODE IS BELOW
import { Model, DataTypes, Sequelize } from 'sequelize';
import sequelize from '../config/database.js';


class Supplier extends Model {}

Supplier.init(
  {
    id: {
      type: DataTypes.INTEGER.UNSIGNED,
      autoIncrement: true,
      primaryKey: true,
    },
    name: {
      type: DataTypes.STRING,
      allowNull: false,
    },
  },
  {
    tableName: 'Suppliers',
    sequelize,
  },
);

export default Supplier;

C:\USERS\BIEL_\ATV-SEQUELIZE\BACKEND\SRC\ROUTES\PRODUCTROUTES.JS CODE IS BELOW
import express from 'express';
import { pool } from '../db.js'; 

const router = express.Router();

// Função para criar um novo produto
router.post('/products', async (req, res) => {
  const { name, price } = req.body;
  
  try {
    const [result] = await pool.query(
      'INSERT INTO products (name, price) VALUES (?, ?)',
      [name, price]
    );
    res.status(201).json({ id: result.insertId, name, price });
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// Função para retornar todos os produtos
router.get('/products', async (_req, res) => {
  try {
    const [products] = await pool.query('SELECT * FROM products');
    res.json(products);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Função para atualizar um produto
router.put('/products/:id', async (req, res) => {
  const { id } = req.params;
  const { name, price } = req.body;

  try {
    const [result] = await pool.query(
      'UPDATE products SET name = ?, price = ? WHERE id = ?',
      [name, price, id]
    );

    if (result.affectedRows) {
      const [updatedProduct] = await pool.query('SELECT * FROM products WHERE id = ?', [id]);
      res.json(updatedProduct[0]);
    } else {
      res.status(404).send('Product not found');
    }
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

// Função para deletar um produto
router.delete('/products/:id', async (req, res) => {
  const { id } = req.params;

  try {
    const [result] = await pool.query('DELETE FROM products WHERE id = ?', [id]);

    if (result.affectedRows) {
      res.status(204).send();
    } else {
      res.status(404).send('Product not found');
    }
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

export default router;

C:\USERS\BIEL_\ATV-SEQUELIZE\BACKEND\SRC\ROUTES\PURCHASEHISTORYROUTES.JS CODE IS BELOW
import express from 'express';
import { PurchaseHistory, Product, Supplier } from '../models/index.js'

const router = express.Router();

router.post('/purchase-history', async (req, res) => {
  const { productId, supplierId, quantity, purchaseDate } = req.body;

  try {
    const purchaseHistory = await PurchaseHistory.create({ productId, supplierId, quantity, purchaseDate });
    res.status(201).json(purchaseHistory);
  } catch (error) {
    res.status(400).json({ error: error.message });
  }
});

router.get('/purchase-history', async (_req, res) => {
  try {
    const histories = await PurchaseHistory.findAll({
      include: [Product, Supplier]
    });
    res.json(histories);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

export default router;


C:\USERS\BIEL_\ATV-SEQUELIZE\FRONTEND\SRC\APP.CSS CODE IS BELOW
.App {
  text-align: center;
}

.App-logo {
  height: 40vmin;
  pointer-events: none;
}

@media (prefers-reduced-motion: no-preference) {
  .App-logo {
    animation: App-logo-spin infinite 20s linear;
  }
}

.App-header {
  background-color: #282c34;
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  font-size: calc(10px + 2vmin);
  color: white;
}

.App-link {
  color: #61dafb;
}

@keyframes App-logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}


C:\USERS\BIEL_\ATV-SEQUELIZE\FRONTEND\SRC\APP.JS CODE IS BELOW
import React from 'react';
import HistoricoComprasForm from './components/HistoricoComprasForm';
import HistoricoComprasList from './components/HistoricoComprasList';

const App = () => {
  return (
    <div className="App">
      <h1>Registro de Histórico de Compras</h1>
      <HistoricoComprasForm />
      <HistoricoComprasList />
    </div>
  );
};

export default App;


C:\USERS\BIEL_\ATV-SEQUELIZE\FRONTEND\SRC\APP.TEST.JS CODE IS BELOW
import { render, screen } from '@testing-library/react';
import App from './App';

test('renders learn react link', () => {
  render(<App />);
  const linkElement = screen.getByText(/learn react/i);
  expect(linkElement).toBeInTheDocument();
});


C:\USERS\BIEL_\ATV-SEQUELIZE\FRONTEND\SRC\COMPONENTS\HISTORICOCOMPRASFORM.JS CODE IS BELOW
import React, { useState } from 'react';
import axios from 'axios';

const ProductForm = () => {
  // Inicializar estado do produto
  const [product, setProduct] = useState({
    name: '',
    price: 0,
  });

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setProduct({
      ...product,
      [name]: name === "price" ? parseFloat(value) : value, // Converte preço para número
    });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('http://localhost:3001/products', product);
      console.log('Produto registrado:', response.data);
    } catch (error) {
      console.error('Erro ao registrar produto', error);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <div>
        <label htmlFor="name">Nome:</label>
        <input
          id="name"
          name="name"
          type="text"
          value={product.name}
          onChange={handleInputChange}
        />
      </div>
      <div>
        <label htmlFor="price">Preço:</label>
        <input
          id="price"
          name="price"
          type="number"
          step="0.01"
          value={product.price}
          onChange={handleInputChange}
        />
      </div>
      <button type="submit">Registrar Produto</button>
    </form>
  );
};

export default ProductForm;


C:\USERS\BIEL_\ATV-SEQUELIZE\FRONTEND\SRC\COMPONENTS\HISTORICOCOMPRASLIST.JS CODE IS BELOW
import React, { useEffect, useState } from 'react';
import axios from 'axios';

const HistoricoComprasList = () => {
  const [historicoCompras, setHistoricoCompras] = useState([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const response = await axios.get('http://localhost:3001/purchase-history');
        setHistoricoCompras(response.data);
      } catch (error) {
        console.error('Erro ao buscar histórico de compras:', error);
      }
    };

    fetchData();
  }, []);

  return (
    <div>
      <h2>Histórico de Compras</h2>
      <ul>
        {historicoCompras.map((compra) => (
          <li key={compra.id}>
            Produto: {compra.Product.name}, Fornecedor: {compra.Supplier.name}, Quantidade: {compra.quantity}, Data: {new Date(compra.purchaseDate).toLocaleDateString()}
          </li>
        ))}
      </ul>
    </div>
  );
};

export default HistoricoComprasList;


C:\USERS\BIEL_\ATV-SEQUELIZE\FRONTEND\SRC\INDEX.CSS CODE IS BELOW
body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

code {
  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',
    monospace;
}


C:\USERS\BIEL_\ATV-SEQUELIZE\FRONTEND\SRC\INDEX.JS CODE IS BELOW
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';
import reportWebVitals from './reportWebVitals';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

// If you want to start measuring performance in your app, pass a function
// to log results (for example: reportWebVitals(console.log))
// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals
reportWebVitals();


C:\USERS\BIEL_\ATV-SEQUELIZE\FRONTEND\SRC\LOGO.SVG CODE IS BELOW
<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 841.9 595.3"><g fill="#61DAFB"><path d="M666.3 296.5c0-32.5-40.7-63.3-103.1-82.4 14.4-63.6 8-114.2-20.2-130.4-6.5-3.8-14.1-5.6-22.4-5.6v22.3c4.6 0 8.3.9 11.4 2.6 13.6 7.8 19.5 37.5 14.9 75.7-1.1 9.4-2.9 19.3-5.1 29.4-19.6-4.8-41-8.5-63.5-10.9-13.5-18.5-27.5-35.3-41.6-50 32.6-30.3 63.2-46.9 84-46.9V78c-27.5 0-63.5 19.6-99.9 53.6-36.4-33.8-72.4-53.2-99.9-53.2v22.3c20.7 0 51.4 16.5 84 46.6-14 14.7-28 31.4-41.3 49.9-22.6 2.4-44 6.1-63.6 11-2.3-10-4-19.7-5.2-29-4.7-38.2 1.1-67.9 14.6-75.8 3-1.8 6.9-2.6 11.5-2.6V78.5c-8.4 0-16 1.8-22.6 5.6-28.1 16.2-34.4 66.7-19.9 130.1-62.2 19.2-102.7 49.9-102.7 82.3 0 32.5 40.7 63.3 103.1 82.4-14.4 63.6-8 114.2 20.2 130.4 6.5 3.8 14.1 5.6 22.5 5.6 27.5 0 63.5-19.6 99.9-53.6 36.4 33.8 72.4 53.2 99.9 53.2 8.4 0 16-1.8 22.6-5.6 28.1-16.2 34.4-66.7 19.9-130.1 62-19.1 102.5-49.9 102.5-82.3zm-130.2-66.7c-3.7 12.9-8.3 26.2-13.5 39.5-4.1-8-8.4-16-13.1-24-4.6-8-9.5-15.8-14.4-23.4 14.2 2.1 27.9 4.7 41 7.9zm-45.8 106.5c-7.8 13.5-15.8 26.3-24.1 38.2-14.9 1.3-30 2-45.2 2-15.1 0-30.2-.7-45-1.9-8.3-11.9-16.4-24.6-24.2-38-7.6-13.1-14.5-26.4-20.8-39.8 6.2-13.4 13.2-26.8 20.7-39.9 7.8-13.5 15.8-26.3 24.1-38.2 14.9-1.3 30-2 45.2-2 15.1 0 30.2.7 45 1.9 8.3 11.9 16.4 24.6 24.2 38 7.6 13.1 14.5 26.4 20.8 39.8-6.3 13.4-13.2 26.8-20.7 39.9zm32.3-13c5.4 13.4 10 26.8 13.8 39.8-13.1 3.2-26.9 5.9-41.2 8 4.9-7.7 9.8-15.6 14.4-23.7 4.6-8 8.9-16.1 13-24.1zM421.2 430c-9.3-9.6-18.6-20.3-27.8-32 9 .4 18.2.7 27.5.7 9.4 0 18.7-.2 27.8-.7-9 11.7-18.3 22.4-27.5 32zm-74.4-58.9c-14.2-2.1-27.9-4.7-41-7.9 3.7-12.9 8.3-26.2 13.5-39.5 4.1 8 8.4 16 13.1 24 4.7 8 9.5 15.8 14.4 23.4zM420.7 163c9.3 9.6 18.6 20.3 27.8 32-9-.4-18.2-.7-27.5-.7-9.4 0-18.7.2-27.8.7 9-11.7 18.3-22.4 27.5-32zm-74 58.9c-4.9 7.7-9.8 15.6-14.4 23.7-4.6 8-8.9 16-13 24-5.4-13.4-10-26.8-13.8-39.8 13.1-3.1 26.9-5.8 41.2-7.9zm-90.5 125.2c-35.4-15.1-58.3-34.9-58.3-50.6 0-15.7 22.9-35.6 58.3-50.6 8.6-3.7 18-7 27.7-10.1 5.7 19.6 13.2 40 22.5 60.9-9.2 20.8-16.6 41.1-22.2 60.6-9.9-3.1-19.3-6.5-28-10.2zM310 490c-13.6-7.8-19.5-37.5-14.9-75.7 1.1-9.4 2.9-19.3 5.1-29.4 19.6 4.8 41 8.5 63.5 10.9 13.5 18.5 27.5 35.3 41.6 50-32.6 30.3-63.2 46.9-84 46.9-4.5-.1-8.3-1-11.3-2.7zm237.2-76.2c4.7 38.2-1.1 67.9-14.6 75.8-3 1.8-6.9 2.6-11.5 2.6-20.7 0-51.4-16.5-84-46.6 14-14.7 28-31.4 41.3-49.9 22.6-2.4 44-6.1 63.6-11 2.3 10.1 4.1 19.8 5.2 29.1zm38.5-66.7c-8.6 3.7-18 7-27.7 10.1-5.7-19.6-13.2-40-22.5-60.9 9.2-20.8 16.6-41.1 22.2-60.6 9.9 3.1 19.3 6.5 28.1 10.2 35.4 15.1 58.3 34.9 58.3 50.6-.1 15.7-23 35.6-58.4 50.6zM320.8 78.4z"/><circle cx="420.9" cy="296.5" r="45.7"/><path d="M520.5 78.1z"/></g></svg>

C:\USERS\BIEL_\ATV-SEQUELIZE\FRONTEND\SRC\REPORTWEBVITALS.JS CODE IS BELOW
const reportWebVitals = onPerfEntry => {
  if (onPerfEntry && onPerfEntry instanceof Function) {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(onPerfEntry);
      getFID(onPerfEntry);
      getFCP(onPerfEntry);
      getLCP(onPerfEntry);
      getTTFB(onPerfEntry);
    });
  }
};

export default reportWebVitals;


C:\USERS\BIEL_\ATV-SEQUELIZE\FRONTEND\SRC\SETUPTESTS.JS CODE IS BELOW
// jest-dom adds custom jest matchers for asserting on DOM nodes.
// allows you to do things like:
// expect(element).toHaveTextContent(/react/i)
// learn more: https://github.com/testing-library/jest-dom
import '@testing-library/jest-dom';

